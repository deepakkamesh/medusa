// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deepakkamesh/medusa/controller (interfaces: HA)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	controller "github.com/deepakkamesh/medusa/controller"
	gomock "github.com/golang/mock/gomock"
)

// MockHA is a mock of HA interface.
type MockHA struct {
	ctrl     *gomock.Controller
	recorder *MockHAMockRecorder
}

// MockHAMockRecorder is the mock recorder for MockHA.
type MockHAMockRecorder struct {
	mock *MockHA
}

// NewMockHA creates a new mock instance.
func NewMockHA(ctrl *gomock.Controller) *MockHA {
	mock := &MockHA{ctrl: ctrl}
	mock.recorder = &MockHAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHA) EXPECT() *MockHAMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockHA) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockHAMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockHA)(nil).Connect))
}

// HAMessage mocks base method.
func (m *MockHA) HAMessage() <-chan controller.HAMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HAMessage")
	ret0, _ := ret[0].(<-chan controller.HAMsg)
	return ret0
}

// HAMessage indicates an expected call of HAMessage.
func (mr *MockHAMockRecorder) HAMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HAMessage", reflect.TypeOf((*MockHA)(nil).HAMessage))
}

// SendMotion mocks base method.
func (m *MockHA) SendMotion(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMotion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMotion indicates an expected call of SendMotion.
func (mr *MockHAMockRecorder) SendMotion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMotion", reflect.TypeOf((*MockHA)(nil).SendMotion), arg0, arg1, arg2)
}

// SendSensorConfig mocks base method.
func (m *MockHA) SendSensorConfig(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSensorConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSensorConfig indicates an expected call of SendSensorConfig.
func (mr *MockHAMockRecorder) SendSensorConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSensorConfig", reflect.TypeOf((*MockHA)(nil).SendSensorConfig), arg0)
}

// SendTemp mocks base method.
func (m *MockHA) SendTemp(arg0, arg1 string, arg2, arg3 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTemp", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTemp indicates an expected call of SendTemp.
func (mr *MockHAMockRecorder) SendTemp(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTemp", reflect.TypeOf((*MockHA)(nil).SendTemp), arg0, arg1, arg2, arg3)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deepakkamesh/medusa/controller (interfaces: HA)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	controller "github.com/deepakkamesh/medusa/controller"
	gomock "github.com/golang/mock/gomock"
)

// MockHA is a mock of HA interface.
type MockHA struct {
	ctrl     *gomock.Controller
	recorder *MockHAMockRecorder
}

// MockHAMockRecorder is the mock recorder for MockHA.
type MockHAMockRecorder struct {
	mock *MockHA
}

// NewMockHA creates a new mock instance.
func NewMockHA(ctrl *gomock.Controller) *MockHA {
	mock := &MockHA{ctrl: ctrl}
	mock.recorder = &MockHAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHA) EXPECT() *MockHAMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockHA) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockHAMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockHA)(nil).Connect))
}

// HAMessage mocks base method.
func (m *MockHA) HAMessage() <-chan controller.HAMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HAMessage")
	ret0, _ := ret[0].(<-chan controller.HAMsg)
	return ret0
}

// HAMessage indicates an expected call of HAMessage.
func (mr *MockHAMockRecorder) HAMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HAMessage", reflect.TypeOf((*MockHA)(nil).HAMessage))
}

// SendAQI mocks base method.
func (m *MockHA) SendAQI(arg0, arg1 string, arg2 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAQI", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAQI indicates an expected call of SendAQI.
func (mr *MockHAMockRecorder) SendAQI(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAQI", reflect.TypeOf((*MockHA)(nil).SendAQI), arg0, arg1, arg2)
}

// SendAvail mocks base method.
func (m *MockHA) SendAvail(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAvail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAvail indicates an expected call of SendAvail.
func (mr *MockHAMockRecorder) SendAvail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAvail", reflect.TypeOf((*MockHA)(nil).SendAvail), arg0, arg1, arg2)
}

// SendDoor mocks base method.
func (m *MockHA) SendDoor(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDoor", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDoor indicates an expected call of SendDoor.
func (mr *MockHAMockRecorder) SendDoor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDoor", reflect.TypeOf((*MockHA)(nil).SendDoor), arg0, arg1, arg2)
}

// SendLight mocks base method.
func (m *MockHA) SendLight(arg0, arg1 string, arg2 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLight", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLight indicates an expected call of SendLight.
func (mr *MockHAMockRecorder) SendLight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLight", reflect.TypeOf((*MockHA)(nil).SendLight), arg0, arg1, arg2)
}

// SendMQTTDiscoveryConfig mocks base method.
func (m *MockHA) SendMQTTDiscoveryConfig(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMQTTDiscoveryConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMQTTDiscoveryConfig indicates an expected call of SendMQTTDiscoveryConfig.
func (mr *MockHAMockRecorder) SendMQTTDiscoveryConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMQTTDiscoveryConfig", reflect.TypeOf((*MockHA)(nil).SendMQTTDiscoveryConfig), arg0)
}

// SendMotion mocks base method.
func (m *MockHA) SendMotion(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMotion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMotion indicates an expected call of SendMotion.
func (mr *MockHAMockRecorder) SendMotion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMotion", reflect.TypeOf((*MockHA)(nil).SendMotion), arg0, arg1, arg2)
}

// SendPressure mocks base method.
func (m *MockHA) SendPressure(arg0, arg1 string, arg2 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPressure", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPressure indicates an expected call of SendPressure.
func (mr *MockHAMockRecorder) SendPressure(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPressure", reflect.TypeOf((*MockHA)(nil).SendPressure), arg0, arg1, arg2)
}

// SendTemp mocks base method.
func (m *MockHA) SendTemp(arg0, arg1 string, arg2, arg3 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTemp", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTemp indicates an expected call of SendTemp.
func (mr *MockHAMockRecorder) SendTemp(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTemp", reflect.TypeOf((*MockHA)(nil).SendTemp), arg0, arg1, arg2, arg3)
}

// SendVolt mocks base method.
func (m *MockHA) SendVolt(arg0, arg1 string, arg2 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVolt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVolt indicates an expected call of SendVolt.
func (mr *MockHAMockRecorder) SendVolt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVolt", reflect.TypeOf((*MockHA)(nil).SendVolt), arg0, arg1, arg2)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deepakkamesh/medusa/controller (interfaces: HA)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	core "github.com/deepakkamesh/medusa/controller/core"
	gomock "github.com/golang/mock/gomock"
)

// MockHA is a mock of HA interface.
type MockHA struct {
	ctrl     *gomock.Controller
	recorder *MockHAMockRecorder
}

// MockHAMockRecorder is the mock recorder for MockHA.
type MockHAMockRecorder struct {
	mock *MockHA
}

// NewMockHA creates a new mock instance.
func NewMockHA(ctrl *gomock.Controller) *MockHA {
	mock := &MockHA{ctrl: ctrl}
	mock.recorder = &MockHAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHA) EXPECT() *MockHAMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockHA) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockHAMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockHA)(nil).Connect))
}

// SendSensorConfig mocks base method.
func (m *MockHA) SendSensorConfig(arg0 *core.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSensorConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSensorConfig indicates an expected call of SendSensorConfig.
func (mr *MockHAMockRecorder) SendSensorConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSensorConfig", reflect.TypeOf((*MockHA)(nil).SendSensorConfig), arg0)
}

// SendSensorData mocks base method.
func (m *MockHA) SendSensorData(arg0 string, arg1 byte, arg2 bool, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSensorData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSensorData indicates an expected call of SendSensorData.
func (mr *MockHAMockRecorder) SendSensorData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSensorData", reflect.TypeOf((*MockHA)(nil).SendSensorData), arg0, arg1, arg2, arg3)
}
